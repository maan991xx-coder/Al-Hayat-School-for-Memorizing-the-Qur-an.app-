import pandas as pd
import streamlit as st
from datetime import datetime

class QuranSchoolSystem:
    def __init__(self):
        self.initialize_storage()
    
    def initialize_storage(self):
        if 'students_df' not in st.session_state:
            st.session_state.students_df = pd.DataFrame(columns=[
                'اسم_الطالب', 'إجمالي_الصفحات_المحفوظة', 
                'إجمالي_الصفحات_المقرؤة', 'عدد_الملفات', 
                'أول_ظهور', 'آخر_ظهور', 'حالة_الالتزام'
            ])
        if 'uploaded_files' not in st.session_state:
            st.session_state.uploaded_files = []
    
    def upload_file(self, uploaded_file):
        try:
            df = pd.read_excel(uploaded_file)
            self.update_students_data(df, datetime.now().strftime("%Y%m%d_%H%M%S"))
            st.session_state.uploaded_files.append(uploaded_file.name)
            return True, "تم رفع الملف وتحليله بنجاح"
        except Exception as e:
            return False, f"خطأ في رفع الملف: {str(e)}"
    
    def update_students_data(self, new_data, file_timestamp):
        students_df = st.session_state.students_df
        
        for index, row in new_data.iterrows():
            student_name = row.iloc[0]
            
            if not students_df.empty and student_name in students_df['اسم_الطالب'].values:
                student_index = students_df[students_df['اسم_الطالب'] == student_name].index[0]
                students_df.at[student_index, 'إجمالي_الصفحات_المحفوظة'] += row.iloc[2] if pd.notna(row.iloc[2]) else 0
                students_df.at[student_index, 'إجمالي_الصفحات_المقرؤة'] += row.iloc[1] if pd.notna(row.iloc[1]) else 0
                students_df.at[student_index, 'عدد_الملفات'] += 1
                students_df.at[student_index, 'آخر_ظهور'] = file_timestamp
            else:
                new_student = {
                    'اسم_الطالب': student_name,
                    'إجمالي_الصفحات_المحفوظة': row.iloc[2] if pd.notna(row.iloc[2]) else 0,
                    'إجمالي_الصفحات_المقرؤة': row.iloc[1] if pd.notna(row.iloc[1]) else 0,
                    'عدد_الملفات': 1,
                    'أول_ظهور': file_timestamp,
                    'آخر_ظهور': file_timestamp,
                    'حالة_الالتزام': 'نشط'
                }
                students_df = pd.concat([students_df, pd.DataFrame([new_student])], ignore_index=True)
        
        st.session_state.students_df = students_df

def main():
    st.set_page_config(page_title="مدرسة الحياة لتحفيظ القرآن", page_icon="📖", layout="wide")
    st.title("📖 مدرسة الحياة لتحفيظ القرآن الكريم")
    st.markdown("---")
    
    system = QuranSchoolSystem()
    
    st.sidebar.title("القائمة الرئيسية")
    menu = st.sidebar.radio("اختر القسم:", [
        "🏠 الصفحة الرئيسية",
        "📤 رفع ملفات الطلاب", 
        "📊 تحليل النتائج",
        "👨‍🎓 إدارة الطلاب",
        "⭐ الطلاب الملتزمين"
    ])
    
    if menu == "🏠 الصفحة الرئيسية":
        st.header("مرحباً بكم في نظام المدرسة")
        st.info("""
        **مميزات النظام:**
        - رفع ملفات Excel لبيانات الطلاب
        - تحليل تقدم الطلاب في التلاوة والحفظ
        - متابعة الطلاب الملتزمين
        - تقارير مفصلة عن الأداء
        """)
        
    elif menu == "📤 رفع ملفات الطلاب":
        st.header("رفع ملفات Excel")
        uploaded_file = st.file_uploader("اختر ملف Excel", type=['xlsx', 'xls'])
        
        if uploaded_file is not None:
            if st.button("رفع وتحليل الملف"):
                with st.spinner('جاري رفع وتحليل الملف...'):
                    success, message = system.upload_file(uploaded_file)
                    if success:
                        st.success(message)
                        st.balloons()
                    else:
                        st.error(message)
            
            df = pd.read_excel(uploaded_file)
            st.subheader("معاينة البيانات:")
            st.dataframe(df.head())
    
    elif menu == "📊 تحليل النتائج":
        st.header("تحليل النتائج والأوائل")
        
        if st.session_state.students_df.empty:
            st.warning("لا توجد بيانات للتحليل")
        else:
            col1, col2 = st.columns(2)
            
            with col1:
                st.subheader("🏆 الأوائل في التلاوة")
                top_recitation = st.session_state.students_df.nlargest(5, 'إجمالي_الصفحات_المقرؤة')
                for i, (_, row) in enumerate(top_recitation.iterrows(), 1):
                    st.write(f"{i}. **{row['اسم_الطالب']}** - {row['إجمالي_الصفحات_المقرؤة']} صفحة")
            
            with col2:
                st.subheader("🏆 الأوائل في الحفظ")
                top_memorization = st.session_state.students_df.nlargest(5, 'إجمالي_الصفحات_المحفوظة')
                for i, (_, row) in enumerate(top_memorization.iterrows(), 1):
                    st.write(f"{i}. **{row['اسم_الطالب']}** - {row['إجمالي_الصفحات_المحفوظة']} صفحة")
    
    elif menu == "👨‍🎓 إدارة الطلاب":
        st.header("إدارة بيانات الطلاب")
        
        if st.session_state.students_df.empty:
            st.warning("لا توجد بيانات للطلاب")
        else:
            student_name = st.text_input("ابحث عن طالب:")
            
            if student_name:
                student_data = st.session_state.students_df[
                    st.session_state.students_df['اسم_الطالب'].str.contains(student_name, na=False)
                ]
                
                if not student_data.empty:
                    student = student_data.iloc[0]
                    st.success(f"بيانات الطالب: **{student['اسم_الطالب']}**")
                    
                    col1, col2, col3 = st.columns(3)
                    with col1:
                        st.metric("الملفات", f"{student['عدد_الملفات']} ملف")
                    with col2:
                        st.metric("الصفحات المقرؤة", f"{student['إجمالي_الصفحات_المقرؤة']} صفحة")
                    with col3:
                        st.metric("الصفحات المحفوظة", f"{student['إجمالي_الصفحات_المحفوظة']} صفحة")
                else:
                    st.error("الطالب غير موجود")
            
            st.subheader("جميع الطلاب")
            st.dataframe(st.session_state.students_df)
    
    elif menu == "⭐ الطلاب الملتزمين":
        st.header("الطلاب الملتزمين")
        
        if st.session_state.students_df.empty or len(st.session_state.uploaded_files) == 0:
            st.warning("لا توجد بيانات كافية")
        else:
            total_files = len(st.session_state.uploaded_files)
            committed_students = st.session_state.students_df[
                st.session_state.students_df['عدد_الملفات'] == total_files
            ]
            
            if committed_students.empty:
                st.info("لا يوجد طلاب ملتزمين ظهروا في جميع الملفات")
            else:
                committed_students = committed_students.nlargest(10, 'إجمالي_الصفحات_المحفوظة')
                st.success(f"الطلاب الملتزمين (ظهروا في جميع {total_files} ملفات)")
                
                for i, (_, row) in enumerate(committed_students.iterrows(), 1):
                    with st.expander(f"🏅 {row['اسم_الطالب']}"):
                        col1, col2 = st.columns(2)
                        with col1:
                            st.write(f"**الصفحات المحفوظة:** {row['إجمالي_الصفحات_المحفوظة']}")
                            st.write(f"**الصفحات المقرؤة:** {row['إجمالي_الصفحات_المقرؤة']}")
                        with col2:
                            st.write(f"**أول ظهور:** {row['أول_ظهور']}")
                            st.write(f"**آخر ظهور:** {row['آخر_ظهور']}")

if __name__ == "__main__":
    main()
